// Workshop 7 - STL Algorithms
// reflect.txt
// write by Saihong Xiao  140777178
// updated by Chris Szalwinski 
// 2019/03/19



The reason that I use container is that it is more flexible. 
I do not need to consider about what type of object it is in
the container, it can be int, float, double, string, and so on.
also I do not need to consider the size of the container. its size
is dynamic. That is the main reason.

I use template function in the following place:

1. using accumulate function to sum up all the x values and all y values.

T xsum = std::accumulate(dot.begin(), dot.end(), 
static_cast<T>(0), [](auto& init, auto& p) {return init + p.first; });

2. using inner_product template function to caculate the
inner product of x and y.
T xy_inner = std::inner_product(dot.begin(), dot.end(), dot.begin(), 
	static_cast<T>(0), std::plus<T>(), [](auto&a, auto&b) { return a.first * b.second; });
3. using lambda expression in the following place
T xy_inner = std::inner_product(dot.begin(), dot.end(), 
dot.begin(), static_cast<T>(0), std::plus<T>(), 
[](auto&a, auto&b) { return a.first * b.second; });

T ysum = std::accumulate(dot.begin(), dot.end(), 
static_cast<T>(0), [](auto& init, auto& p) {return init + p.second; });

4. wit STL, we can make use of a lot of functions, templates, containers which
makes our programming much easier. Because we do not need to write all
the functions by ourselves.
